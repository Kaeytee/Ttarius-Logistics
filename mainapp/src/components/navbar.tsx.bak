import { useState, useEffect, useCallback } from "react";
import { Link, useLocation } from "react-router-dom";
import { Menu, X } from "lucide-react";
import { Button } from "./ui/button";
import { cn } from "../lib/utils";
import { motion, AnimatePresence } from "framer-motion";
import { useTheme } from "../context/ThemeProvider";
import { useAuth } from "../context/AuthProvider";

export default function Navbar() {
	const { resolvedTheme } = useTheme();
	const [mounted, setMounted] = useState(false);
	const [isMenuOpen, setIsMenuOpen] = useState(false);
	const [scrolled, setScrolled] = useState(false);
	const location = useLocation();
	const pathname = location.pathname;
	const { user, logout } = useAuth();

	// Initialize mounted state
	useEffect(() => {
		setMounted(true);
	}, []);

	// Handle scroll position with simple throttling
	const updateScroll = useCallback(() => {
		setScrolled(window.scrollY > 10);
	}, []);

	useEffect(() => {
		// Set initial scroll state
		updateScroll();

		// Simple throttling without lodash
		let ticking = false;
		const handleScroll = () => {
			if (!ticking) {
				requestAnimationFrame(() => {
					updateScroll();
					ticking = false;
				});
				ticking = true;
			}
		};

		window.addEventListener("scroll", handleScroll, { passive: true });
		return () => {
			window.removeEventListener("scroll", handleScroll);
		};
	}, [updateScroll]);

	// Reset menu on pathname change
	useEffect(() => {
		setIsMenuOpen(false);
	}, [pathname]);

	// Handle body overflow for mobile menu
	useEffect(() => {
		document.body.style.overflow = isMenuOpen ? "hidden" : "";
		return () => {
			document.body.style.overflow = "";
		};
	}, [isMenuOpen]);

	// Navigation links
	const navLinks = [
		...(user ? [{ href: "/dashboard", label: "Dashboard" }] : []),
		{ href: "/", label: "Home" },
		{ href: "/about", label: "About Us" },
		{ href: "/services", label: "Services" },
		{ href: "/contact", label: "Contact" },
	];

	const hideLogin = pathname === "/login";
	const hideRegister = pathname === "/register";

	return (
		<header className={cn(
			"bg-white w-full fixed top-0 left-0 right-0 z-50 transition-all duration-300",
			scrolled ? "shadow-md border-b border-gray-200" : "shadow-sm border-b border-gray-100"
		)}>
			<div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
				<div className="flex justify-between items-center h-16">
					{/* Logo */}
					<Link to="/" className="flex-shrink-0">
						<span className="text-2xl font-bold text-red-600 tracking-tight">
							LogisticApp
						</span>
					</Link>

					{/* Desktop Navigation */}
					<div className="hidden md:flex items-center space-x-8">
						{navLinks.filter(link => link.href !== "/dashboard").map((link) => (
							<Link
								key={link.href}
								to={link.href}
								className={cn(
									"px-3 py-2 text-sm font-medium transition-colors duration-200 relative group",
									pathname === link.href
										? "text-red-600"
										: "text-gray-700 hover:text-red-600"
								)}
							>
								{link.label}
								<span className={cn(
									"absolute bottom-0 left-0 h-0.5 bg-red-600 transition-all duration-200",
									pathname === link.href ? "w-full" : "w-0 group-hover:w-full"
								)}></span>
							</Link>
						))}
					</div>

					{/* Desktop Auth Buttons */}
					<div className="hidden md:flex items-center space-x-3">
						{user ? (
							<div className="flex items-center gap-3">
								{user.email && (
									<span className="text-sm text-gray-600 mr-2">{user.email}</span>
								)}
								<Button onClick={logout} variant="outline" className="border-red-600 text-red-600 hover:bg-red-50">Logout</Button>
							</div>
						) : (
							<>
								{!hideLogin && (
									<Link
										to="/login"
										className="px-4 py-2 text-sm font-medium text-red-600 hover:text-red-700 transition-colors duration-200 rounded-md hover:bg-red-50 border border-red-600"
									>
										Log In
									</Link>
								)}
								{!hideRegister && (
									<Link
										to="/register"
										className="px-4 py-2 text-sm font-medium bg-red-600 text-white rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 transition-all duration-200 shadow-sm"
									>
										Register
									</Link>
								)}
							</>
						)}
					</div>

					{/* Mobile menu button */}
					<div className="flex items-center md:hidden">
						<button
							onClick={() => setIsMenuOpen(!isMenuOpen)}
							className="inline-flex items-center justify-center p-2 rounded-md text-gray-700 hover:text-red-600 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-red-500 transition-colors duration-200"
							aria-expanded={isMenuOpen}
						>
							<span className="sr-only">Open main menu</span>
							{isMenuOpen ? (
								<X className="block h-6 w-6" aria-hidden="true" />
							) : (
								<Menu className="block h-6 w-6" aria-hidden="true" />
							)}
						</button>
					</div>
				</div>
			</div>

			{/* Mobile menu */}
			<div
				className={cn(
					"md:hidden transition-all duration-300 ease-in-out overflow-hidden",
					isMenuOpen
						? "max-h-96 opacity-100 visible"
						: "max-h-0 opacity-0 invisible"
				)}
			>


				{/* Mobile menu */}
				<AnimatePresence>
					{isMenuOpen && (
						<motion.div
							className="fixed inset-0 z-40 flex flex-col bg-background/95 backdrop-blur-md md:hidden overflow-y-auto"
							initial={{ opacity: 0 }}
							animate={{ opacity: 1 }}
							exit={{ opacity: 0 }}
							transition={{ duration: 0.2 }}
						>
							<div className="h-16"></div>
							<nav className="flex flex-col gap-4 p-6">
								{navLinks.map((link, index) => (
									<motion.div
										key={link.href}
										initial={{ opacity: 0, y: 10 }}
										animate={{ opacity: 1, y: 0 }}
										transition={{ duration: 0.3, delay: 0.1 * index }}
									>
										<Link
											to={link.href}
											className={cn(
												"text-lg font-medium p-3 hover:bg-muted rounded-md block transition-colors",
												pathname === link.href ? "bg-muted text-primary" : ""
											)}
											onClick={() => setIsMenuOpen(false)}
										>
											{link.label}
										</Link>
									</motion.div>
								))}

								{/* Mobile Auth buttons */}
								<motion.div
									className="flex flex-col gap-3 mt-6"
									initial={{ opacity: 0, y: 20 }}
									animate={{ opacity: 1, y: 0 }}
									transition={{ duration: 0.3, delay: 0.4 }}
								>
									{user ? (
										<>
											<span className="font-semibold text-lg text-primary w-full py-6 text-center">Hi, {user.name}</span>
											<Button onClick={logout} variant="outline" className="w-full py-6">Logout</Button>
										</>
									) : (
										<>
											{!hideLogin && (
												<Button variant="outline" asChild className="w-full py-6">
													<Link to="/login" onClick={() => setIsMenuOpen(false)}>
														Login
													</Link>
												</Button>
											)}
											{!hideRegister && (
												<Button asChild className="w-full py-6">
													<Link to="/register" onClick={() => setIsMenuOpen(false)}>
														Register
													</Link>
												</Button>
											)}
										</>
									)}
								</motion.div>
							</nav>
						</motion.div>
					)}
				</AnimatePresence>
			</motion.header >
			);
}